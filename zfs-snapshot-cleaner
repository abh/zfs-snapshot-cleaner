#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long qw(GetOptions);
use Data::Dump 'pp';
use DateTime;
use Carp qw(croak);
use IPC::Cmd qw(run);

# MIT licensed, see `LICENSE`

# TODO:
#   Rename parameters (omit keep- and k prefixes)
#   Add prefix option
#   Add recursive option
#   bail out without -f parameter if deleting more than 30% of the snapshots

# Features
#   Doesn't rely on the backup running on certain days (first of the month, sunday, ...) to
#      keep the right number of backups    
#   Handles various date formats
#   Make a snapshot permanent by adding a text description after the date (test this)

IPC::Cmd->can_capture_buffer or die "Please install IPC::Run or IPC::Open3";

Getopt::Long::Configure ("bundling");

my %keep = (
            hours => 5,
            days => 7,
            weeks => 6,
            months => 6,
            years => 3,
);

GetOptions(
           'keep-hours|kh=i' => \$keep{hours},
           'keep-days|kd=i' =>  \$keep{days},
           'keep-weeks|kw=i' => \$keep{weeks},
           'keep-months|km=i' => \$keep{months},
           'keep-years|ky=i'  => \$keep{years},

           'max-purge=i'      => \(my $opt_maxpurge = 0),

	   'n!'	=> \(my $opt_noexecute = 0),

           'recurse|r' => \(my $opt_recurse = 0),

           'debug!'  => \(my $debug),
           'verbose+' => \(my $verbose = -t STDIN ? 1 : 0),
);

my @fs = @ARGV
  or die show_help();

sub pdebug { print join(" ", @_), "\n" if $debug }
sub plog   { print join(" ", @_), "\n" if $verbose || $debug }

# if verbose, show the keep schedule

if ($opt_recurse) {
    @fs = (map get_subdatasets($_), @fs)
}

for my $fs (@fs) {
    plog "Trimming $fs";
    my $snapshots = get_snapshots( $fs );
    pp($snapshots) if $debug;

    for my $type (qw(hours days weeks months years)) {
        my $method = $type;
        $method =~ s/s$//;

        if ($type eq 'weeks') {
            $method = 'week_number';
        }

        plog "scanning for $type";

        my $current_period = -1;
        my $kept;

        for my $snap (@$snapshots) {

            # always keep the latest snapshot (TODO: make sure this makes sense)
            if ($current_period == -1) {
                $snap->{keep}->{latest} = 1;
                $current_period--;
                next;
            }

            # TODO: period should include the more signficant components
            # so we tell midnight today apart from midnight yesterday even
            # if there are no snapshots in between
            my $snap_period = $snap->{time}->$method;

            if ($current_period != $snap_period) {
                $current_period = $snap_period;

                plog "Keep", $snap->{snapshot}, "for $type";
                $snap->{keep}->{$type}++;
                $kept++;
            }
            else {
                pdebug "Don't need ", $snap->{snapshot}, "for $type (got one already)";
            }

            if ($kept == $keep{$type}) {
                plog "Got enough for $type";
                last;
            }

        }
    }

    my $purged = 0;

    for my $snap (reverse @$snapshots) {
        my $keep = "";
        if ($snap->{keep}) {
            $keep = join(",", sort keys %{ $snap->{keep} });
        }
        plog( ($keep ? "+" : "-") . $keep,  $snap->{snapshot}, $keep, $snap->{full} );

        unless ($opt_noexecute or $keep) {
            _run( "zfs", "destroy", $snap->{full} );
            $purged++;
            if ($opt_maxpurge and $purged == $opt_maxpurge) {
                pdebug("Purged the limit of $purged old snapshots");
                last;
            }
        }
    }

    plog("Snapshots purged: $purged") if $purged;

}

sub get_subdatasets {
    my $fs = shift;
    no warnings qw(qw);
    my( $success, $error_message, $full_buf, $stdout_buf, $stderr_buf ) =
        run( command => [qw(zfs list -r -o name -t volume,filesystem -H), $fs], verbose => 0 );

    if (@$stderr_buf) {
        die "zfs list returned:\n", join "\n", @$stderr_buf, "";
    }
    my @zfs_lines = map { split /\n/ } join "", @$stdout_buf;
    return @zfs_lines;
}

sub get_snapshots {
    my $fs = shift;

    my( $success, $error_message, $full_buf, $stdout_buf, $stderr_buf ) =
        run( command => [qw(zfs list -t snapshot -H -d 1), $fs], verbose => 0 );

    if (@$stderr_buf) {
        die "zfs list returned:\n", join "\n", @$stderr_buf, "";
    }
    my @zfs_lines = map { split /\n/ } join "", @$stdout_buf;

    my @snapshots;

    for my $snap (@zfs_lines) {
        plog "SNAP: $snap";
        chomp $snap;
        my ($name) = split /\t/, $snap;
        my $full = $name;
        $name =~ s/.*?\@// or die "Could not find \@ in $name";

        my $date = $name;
        plog("date: ", $date);

        # From Date::Parser
        if ($date =~ m/(\d{4})([-:_]?)(\d\d?)\2(\d\d?)(?:[-Tt_ ](\d\d?)(?:([:-]?)(\d\d?)(?:\6(\d\d?)(?:[.,](\d+))?)?)?)?$/) {
            my ($year,$month,$day,$hh,$mm,$ss,$frac) = ($1,$3,$4,$5,$7,$8,$9);
            print join "-", map { $_ || 'undef' } ($year,$month,$day,$hh,$mm,$ss,$frac);
            print "\n";
            $date = DateTime->new( year => $year,
                                   month => $month,
                                   day => $day,
                                   ($hh ? (hour => $hh) : ()),
                                   ($mm ? (minute => $mm) : ()),
                                 );
        }
        else {
            plog "Could not parse $date";
            next;
        }

        push @snapshots, { full => $full,
                           snapshot => $name,
                           time => $date,
                         };
    }

    @snapshots = sort { $b->{time} <=> $a->{time} } @snapshots;
    map { $_->{ptime} = $_->{time}->datetime } @snapshots;

    return \@snapshots;
}

sub _run {
    my @ar = @_;
    my $parms = ref $ar[-1] eq "HASH" ? pop @ar : {};

    print "Running: ", join(" ", @ar), "\n" unless $parms->{silent};

    return 1 if system(@ar) == 0;

    my $exit_value = $? >> 8;
    return 0
      if $parms->{fail_silent_if}
          && $exit_value == $parms->{fail_silent_if};

    my $msg = "system @ar failed: $exit_value ($?)";
    croak($msg) unless $parms->{failok};
    print "$msg\n";
    return 0;
}


sub show_help {

    print( <<"END_OF_HELP" );
Usage: zfs-snapshot-cleaner [OPTION]... [FILESYSTEM] [FILESYSTEM]

END_OF_HELP

}
